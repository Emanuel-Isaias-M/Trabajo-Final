// ‚úÖ Importa el modelo Mongoose del pa√≠s
// Este modelo define c√≥mo debe lucir un documento de pa√≠s en la base de datos
import Pais from '../models/paisModel.mjs';

// ‚úÖ Importa la interfaz abstracta (IPaisRepository)
// Esta interfaz define qu√© m√©todos debe tener cualquier clase repositorio de pa√≠ses
// Sirve como contrato: obliga a mantener estructura y evita olvidos
import IPaisRepository from './IPaisRepository.mjs';

// ‚úÖ Clase concreta que implementa el repositorio de pa√≠ses
// Extiende la interfaz y define la l√≥gica real para comunicarse con MongoDB
class PaisRepository extends IPaisRepository {
  
  // üåç Obtener todos los pa√≠ses creados por un usuario, con √°rea mayor o igual a 1
  async obtenerPorCreador(creador) {
    return await Pais.find({
      creador,               // Filtra por el creador
      area: { $gte: 1 }      // Solo pa√≠ses con √°rea mayor o igual a 1
    });
  }

  // ‚ûï Insertar un √∫nico pa√≠s en la base de datos
  // Usado cuando se env√≠a un formulario o una API agrega uno por uno
  async insertarUnPais(pais) {
    const nuevoPais = new Pais(pais);   // Crea una instancia del modelo con los datos
    return await nuevoPais.save();      // Guarda el documento en MongoDB
  }

  // üì• Insertar m√∫ltiples pa√≠ses (bulk insert)
  // Se usa en la importaci√≥n autom√°tica desde una API externa
  async insertarPais(paises) {
    console.log('Insertando pa√≠ses:', paises.length); // Loguea cu√°ntos pa√≠ses se van a insertar
    return await Pais.insertMany(paises);             // Inserta todos los documentos en un solo paso
  }

  // ‚úèÔ∏è Actualizar un pa√≠s por ID y creador (verificaci√≥n de seguridad)
  // Evita que un usuario edite pa√≠ses que no le pertenecen
  async actualizarPais(id, nuevosDatos, creador) {
    return await Pais.findOneAndUpdate(
      {
        _id: id,           // Busca el pa√≠s por su ID
        creador            // Asegura que solo el creador original pueda modificarlo
      },
      nuevosDatos,         // Datos ya procesados desde el servicio
      {
        new: true          // Devuelve el documento actualizado, no el anterior
      }
    );
  }

  // ‚ùå Eliminar un pa√≠s por ID y creador (seguridad)
  // Solo se elimina si el pa√≠s pertenece al creador actual
  async eliminarPais(id, creador) {
    return await Pais.findOneAndDelete({
      _id: id,             // Busca por ID
      creador              // Verifica propiedad del documento
    });
  }
}

// ‚úÖ Exporta una √∫nica instancia de la clase
// Esto permite importar directamente y usar sus m√©todos como si fuera un objeto
export default new PaisRepository();
