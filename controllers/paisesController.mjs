// ‚úÖ Importa los servicios con alias para evitar conflictos
import {
  obtenerPaisesPorCreador,
  crearPais as crearPaisService,
  editarPais as editarPaisService,
  eliminarPais as eliminarPaisService
} from '../services/paisService.mjs';

import * as PaisAPIService from '../services/paisAPIService.mjs';

// ‚úÖ Define el nombre del creador por defecto
const CREADOR = 'Isaias';

// üåç Obtener todos los pa√≠ses
export async function obtenerPaises(req, res, api = false) {
  try {
    const paises = await obtenerPaisesPorCreador(CREADOR);

    if (api === true) {
      return res.json({ paises });
    }

    res.render('dashboard', { paises });
  } catch (error) {
    console.error('Error en obtenerPaises:', error);
    res.status(500).json({ mensaje: 'Error al obtener pa√≠ses', error: error.message });
  }
}

// ‚ûï Agregar pa√≠s
export async function agregarPais(req, res) {
  try {
    const pais = await crearPaisService(req.body, CREADOR);

    if (req.headers.accept !== 'application/json') {
      return res.redirect('/dashboard');
    }

    return res.status(201).json({
      mensaje: 'Pa√≠s creado correctamente',
      pais
    });
  } catch (error) {
    return res.status(500).json({ mensaje: 'Error al agregar pa√≠s', error });
  }
}

// ‚úèÔ∏è Controlador: Editar pa√≠s existente
export async function editarPais(req, res) {
  try {
    // üß† Llama al servicio para procesar los datos y actualizar el pa√≠s en MongoDB
    // req.params.id = ID del pa√≠s (desde la URL)
    // req.body = datos enviados desde el formulario
    // CREADOR = nombre del usuario que est√° editando
    const pais = await editarPaisService(req.params.id, req.body, CREADOR);

    // ‚ùå Si no se encontr√≥ el pa√≠s o no le pertenece al usuario, devuelve error 404
    if (!pais) {
      return res.status(404).json({ mensaje: 'Pa√≠s no encontrado o no autorizado' });
    }

    // üåê Si no es una API (es un formulario HTML), redirige al dashboard
    if (req.headers.accept !== 'application/json') {
      return res.redirect('/dashboard');
    }

    // ‚úÖ Si es una API, responde con un JSON indicando √©xito y devuelve el pa√≠s actualizado
    return res.json({
      mensaje: 'Pa√≠s actualizado correctamente',
      pais
    });

  } catch (error) {
    // üí• Si ocurre un error inesperado, responde con error 500 y el mensaje
    return res.status(500).json({ mensaje: 'Error al editar pa√≠s', error });
  }
}


// ‚ùå Eliminar pa√≠s
export async function eliminarPais(req, res, api = false) {
  try {
    const eliminado = await eliminarPaisService(req.params.id, CREADOR);

    if (!eliminado) {
      return res.status(404).json({ mensaje: 'Pa√≠s no encontrado o no autorizado' });
    }

    if (api) {
      return res.json({ mensaje: 'Pa√≠s eliminado correctamente' });
    }

    res.redirect('/dashboard');
  } catch (error) {
    res.status(500).json({ mensaje: 'Error al eliminar pa√≠s', error });
  }
}

// üåê Obtener desde API externa
export async function obtenerYGuardarPaises(req, res) {
  try {
    await PaisAPIService.obtenerYGuardarPaises();
    res.redirect('/dashboard');
  } catch (error) {
    res.status(500).json({ mensaje: 'Error al obtener y guardar los pa√≠ses', error });
  }
}