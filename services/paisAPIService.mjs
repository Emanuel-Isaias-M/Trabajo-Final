// ‚úÖ Importa node-fetch para hacer peticiones HTTP desde Node.js, como si fuera fetch del navegador
import fetch from 'node-fetch';

// ‚úÖ Importa todas las funciones del repositorio de pa√≠ses
// Este archivo se encarga de guardar los datos en MongoDB
import * as PaisRepository from "../repositories/PaisRepository.mjs";

// üîÅ Funci√≥n para obtener todos los pa√≠ses desde la API externa (restcountries.com)
export async function obtenerPaisesDeAPI() {
    try {
        // üåê Realiza una petici√≥n GET a la API que devuelve informaci√≥n de todos los pa√≠ses
        const response = await fetch('https://restcountries.com/v3.1/all');

        // üîÑ Convierte la respuesta a formato JSON (devuelve un array de objetos pa√≠s)
        return await response.json();
    } catch (error) {
        // ‚ö†Ô∏è Si ocurre un error (por ejemplo, no hay conexi√≥n), se muestra en consola y se lanza la excepci√≥n
        console.error('Error al obtener los pa√≠ses de la API:', error);
        throw error;
    }
}

// üåç Funci√≥n que filtra los pa√≠ses que tienen como idioma el espa√±ol
export function filtrarPaisesEnEspanol(paises) {
    return paises.filter(pais =>
        pais.languages && Object.keys(pais.languages).includes('spa') // Verifica si el idioma 'spa' (espa√±ol) est√° en el objeto languages
    );
}

// üíæ Funci√≥n que guarda los pa√≠ses filtrados en la base de datos (MongoDB)
export async function guardarPaises(paises) {
    // üîÑ Mapea los pa√≠ses para darles el formato que espera el modelo de Mongoose (paisModel.mjs)
    const paisesFormateados = paises.map(pais => ({
        name: pais.name || {},                        // Nombre com√∫n, oficial y nativo
        independent: pais.independent || false,       // Si es independiente
        status: pais.status || 'unknown',             // Estado del pa√≠s (ej: assigned)
        unMember: pais.unMember || false,             // Si es miembro de la ONU
        currencies: pais.currencies || {},            // Monedas oficiales
        capital: pais.capital || [],                  // Capital o capitales
        region: pais.region || '',                    // Regi√≥n general (ej: Americas)
        subregion: pais.subregion || '',              // Subregi√≥n (ej: South America)
        languages: pais.languages || {},              // Idiomas hablados
        latlng: pais.latlng || [],                    // Coordenadas geogr√°ficas
        landlocked: pais.landlocked || false,         // Si no tiene salida al mar
        borders: pais.borders || [],                  // Pa√≠ses con los que limita
        area: pais.area || 0,                         // Superficie en km¬≤
        flag: pais.flag || '',                        // Emoji o √≠cono de bandera
        maps: pais.maps || {},                        // URLs de mapas
        population: pais.population || 0,             // N√∫mero de habitantes
        // gini: pais.gini || {},                     // (opcional) √≠ndice de desigualdad
        fifa: pais.fifa || '',                        // C√≥digo FIFA (ej: ARG)
        timezones: pais.timezones || [],              // Zonas horarias
        continents: pais.continents || [],            // Continente/s donde est√° ubicado
        flags: pais.flags || {},                      // URLs de las banderas (SVG, PNG)
        startOfWeek: pais.startOfWeek || '',          // D√≠a en que empieza la semana
        capitalInfo: pais.capitalInfo || {},          // Informaci√≥n extra de la capital
        creador: 'Isaias'                             // Marca que vos lo creaste/importaste
    }));

    // üì• Inserta los pa√≠ses en la base de datos usando el repositorio
    return await PaisRepository.insertarPais(paisesFormateados);
}

// üîÅ Funci√≥n principal que ejecuta todo el proceso:
// 1. Obtener pa√≠ses de la API
// 2. Filtrar los que hablan espa√±ol
// 3. Guardarlos en MongoDB
export async function obtenerYGuardarPaises() {
    try {
        const paises = await obtenerPaisesDeAPI(); // Paso 1: Obtener todos los pa√≠ses desde la API
        const paisesEnEspanol = filtrarPaisesEnEspanol(paises); // Paso 2: Filtrar solo los hispanohablantes
        return await guardarPaises(paisesEnEspanol); // Paso 3: Guardarlos en MongoDB
    } catch (error) {
        // ‚ö†Ô∏è Si falla algo en el proceso, se muestra en consola y se lanza el error
        console.error('Error en el proceso completo:', error);
        throw error;
    }
}
